@page "/folders"
@using YourNoteBook.Services
@inject FirebaseFolderJsInteropService FolderService

<h3>Folder Management</h3>

<button @onclick="CreateFolder">Create Folder</button>
<button @onclick="LoadFolder">Load Folder</button>
<button @onclick="UpdateFolder">Update Folder</button>
<button @onclick="DeleteFolder">Delete Folder</button>

@if (folder != null)
{
    <div>
        <h4>Folder Details</h4>
        <p>ID: @folder.id</p>
        <p>Name: @folder.name</p>
        <p>Created: @folder.created</p>
    </div>
}

@code {
    private dynamic folder;
    private string lastCreatedFolderId;

    // Example configuration object for Firebase. Replace with your own values.
    private readonly object firebaseConfig = new
    {
        apiKey = "YOUR_API_KEY",
        authDomain = "YOUR_PROJECT.firebaseapp.com",
        projectId = "YOUR_PROJECT",
        storageBucket = "YOUR_PROJECT.appspot.com",
        messagingSenderId = "YOUR_SENDER_ID",
        appId = "YOUR_APP_ID"
    };

    protected override async Task OnInitializedAsync()
    {
        // Initialize Firebase
        var initialized = await FolderService.InitializeFirebaseAsync(firebaseConfig);
        Console.WriteLine($"Firebase initialized: {initialized}");
    }

    private async Task CreateFolder()
    {
        var newFolder = new
        {
            name = "My New Folder",
            // Additional properties as needed. 'created' is set by serverTimestamp.
        };

        var result = await FolderService.SaveFolderAsync(newFolder);
        if (result.success == true)
        {
            lastCreatedFolderId = result.id;
            Console.WriteLine($"Created folder with ID: {lastCreatedFolderId}");
        }
        else
        {
            Console.WriteLine($"Error creating folder: {result.error}");
        }
    }

    private async Task LoadFolder()
    {
        if (!string.IsNullOrEmpty(lastCreatedFolderId))
        {
            folder = await FolderService.GetFolderAsync(lastCreatedFolderId);
        }
    }

    private async Task UpdateFolder()
    {
        if (!string.IsNullOrEmpty(lastCreatedFolderId))
        {
            var updatedData = new
            {
                name = "Updated Folder Name"
                // Include other properties to update as needed.
            };

            var result = await FolderService.UpdateFolderAsync(lastCreatedFolderId, updatedData);
            Console.WriteLine(result.success == true ? "Folder updated successfully!" : $"Error updating folder: {result.error}");
        }
    }

    private async Task DeleteFolder()
    {
        if (!string.IsNullOrEmpty(lastCreatedFolderId))
        {
            var result = await FolderService.DeleteFolderAsync(lastCreatedFolderId);
            Console.WriteLine(result.success == true ? "Folder deleted successfully!" : $"Error deleting folder: {result.error}");
            folder = null;
            lastCreatedFolderId = null;
        }
    }
}
