@inherits LayoutComponentBase
@inject InMemoryRepo InMemoryRepo
@inject NavigationManager NavigationManager
<MudThemeProvider /> 
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
@inject IDialogService DialogService
<MudLayout>
    <MudAppBar Color="Color.Surface" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle"/>
        <MudTextField  @bind-Value="Search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" 
                       AdornmentIcon="@Icons.Material.Filled.Search"  AdornmentColor="Color.Secondary" Style="max-width: 400px"/>
        <MudSpacer /> 
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="AddNotes"> Add Notes</MudIconButton> 
            <MudIconButton Icon="@Icons.Material.Filled.Shortcut" OnClick="AddShortcut"> Add Shortcut</MudIconButton> 
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Color="Color.Default">
        <FolderNavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudPaper Class="pa-2 ma-2" Elevation="0">
            @Body
        </MudPaper>
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true; 
    public string Search { get; set; } = string.Empty;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    } 
    private async Task AddNotes(MouseEventArgs arg)
    {
        var options = new DialogOptions { 
            CloseOnEscapeKey = true ,
            BackgroundClass = "my-custom-class" ,
            CloseButton = true, 
        };

        var dialog = await DialogService.ShowAsync<AddNotesDialogue>("Add Notes", options);
        var result = await dialog.Result; 
        if (result is { Canceled: false, Data: Note } && CurrentContext.CurrentFolderId is not null)
        {
            var note = (Note)result.Data; 
            note.Id = Guid.NewGuid().ToString();
            note.FolderId = CurrentContext.CurrentFolderId;
            InMemoryRepo.AddItem(note);
        }
        StateHasChanged();
    }

    private async Task AddShortcut(MouseEventArgs arg)
    {
        var options = new DialogOptions { 
            CloseOnEscapeKey = true ,
            BackgroundClass = "my-custom-class" ,
            CloseButton = true, 
        };

        var dialog = await DialogService.ShowAsync<AddShortcutDialogue>("Add Shortcut", options);
        var result = await dialog.Result; 
        if (result is { Canceled: false, Data: Shortcut } && CurrentContext.CurrentFolderId is not null)
        {
            var shortcut = (Shortcut)result.Data; 
            shortcut.Id = Guid.NewGuid().ToString(); 
            shortcut.FolderId = CurrentContext.CurrentFolderId;
            InMemoryRepo.AddItem(shortcut);
        }
        StateHasChanged();
    } 
}